‚ÄãDesafio 3:

‚òê Adicione testes para um (ou mais, caso prefira) componentes do projeto.
‚òê Adicione asser√ß√µes para os testes criados criados para o POST classes
‚òê Adicione uma spec para testar o cadastro de novos professores (give-classes)

Teste de componentes:
    Escolha um dos componentes do projeto (src/components)
    Crie uma nova spec no diret√≥rio com os testes de componentes
    Adicione as importa√ß√µes para: React, mount, BrowserRouter e componente que escolheu
    Crie a estrutura do Mocha (context / it)
    Monte o componente usando o m√©todo mount
    Execute a spec e verifique o se o componente √© carregado
    Adicione a estiliza√ß√£o para o componente com os css base e index
    Adicione asser√ß√µes para finalizar o teste de seu componente
    Dica: adicione coment√°rios em seu c√≥digo. Vai ajudar a lembrar a responsabilidade de cada linha

Testes de API's:
    Acesse a spec com os testes criados para o POST classes
    Execute o fluxo manualmente ou verifique no DevTools as informa√ß√µes da requisi√ß√£o
    Adicione asser√ß√µes no teste para verificar informa√ß√µes da resposta do servidor
    Dica: use sua criatividade para adicionar asser√ß√µes diferentes das adicionadas para o teste de GET se tiver uma ideia do que pode ser validado, mas n√£o souber como, me chama e vamos pensar juntos :)

Testes de UI:
    Crie uma nova spec para o fluxo de cadastro
    Mapeie os elementos que voc√™ ir√° interagir
    Interaja com os elementos, preenchendo as informa√ß√µes
    Adicione asser√ß√µes para validar o fluxo de cadastro
    Obs.: se preferir, abstraia os elementos e a√ß√µes usando a t√©cnica do N√≠vel 2 :)
    Obs.: suba a aplica√ß√£o no modo instrumentado, execute os testes de UI e verifique. Houve altera√ß√£o na cobertura de c√≥digo? ü§î


Ao finalizar o projeto:
    Adicione a URL de seu Cypress Dashboard no README do Github
    Envie o projeto do Github no link https://forms.gle/STybJbNVuKLYgMu7A